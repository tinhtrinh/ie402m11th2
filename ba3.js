const ba3base = {
    type: "polygon",
    rings: [
        [106.78109366801408, 10.882720661318489, 0],
        [106.78122844900953, 10.882558013545662, 0],
        [106.78122643735288, 10.882542209708816, 0],
        [106.781233142875, 10.882536941763018, 0],
        [106.78124521281478, 10.882546819161325, 0],
        [106.78129751589098, 10.882484920791823, 0],
        [106.78129013981666, 10.882477677364928, 0],
        [106.78129483368213, 10.882469116951098, 0],
        [106.78130355086087, 10.882469116951098, 0],
        [106.78143632019908, 10.882311736990449, 0],
        [106.78130489196555, 10.882203085503125, 0],
        [106.78118083980672, 10.882355197571092, 0],
        [106.78116043374256, 10.88234062253091, 0],
        [106.78108197913399, 10.88243281162974, 0],
        [106.78110008404366, 10.882449932459233, 0],
        [106.78096329139105, 10.88261060481298, 0]
    ]
}

const ba3roof = {
    type: "polygon",
    rings: [
        [106.78109366801408, 10.882720661318489, 35],
        [106.78122844900953, 10.882558013545662, 35],
        [106.78122643735288, 10.882542209708816, 35],
        [106.781233142875, 10.882536941763018, 35],
        [106.78124521281478, 10.882546819161325, 35],
        [106.78129751589098, 10.882484920791823, 35],
        [106.78129013981666, 10.882477677364928, 35],
        [106.78129483368213, 10.882469116951098, 35],
        [106.78130355086087, 10.882469116951098, 35],
        [106.78143632019908, 10.882311736990449, 35],
        [106.78130489196555, 10.882203085503125, 35],
        [106.78118083980672, 10.882355197571092, 35],
        [106.78116043374256, 10.88234062253091, 35],
        [106.78108197913399, 10.88243281162974, 35],
        [106.78110008404366, 10.882449932459233, 35],
        [106.78096329139105, 10.88261060481298, 35]
    ]
}

const ba3floor = []

for(let i = 0; i <= 15; i ++) {
    let r1, r2, r3, r4;

    if(i < 15) {
        r1 = ba3base.rings[i];
        r2 = ba3base.rings[i + 1];
        r3 = [ba3base.rings[i + 1][0], ba3base.rings[i + 1][1] + 0.000000000000010, 10];
        r4 = [ba3base.rings[i][0], ba3base.rings[i][1] + 0.000000000000010, 10];
    } else {
        r1 = ba3base.rings[15];
        r2 = ba3base.rings[0];
        r3 = [ba3base.rings[0][0], ba3base.rings[0][1] + 0.000000000000010, 10];
        r4 = [ba3base.rings[15][0], ba3base.rings[15][1] + 0.000000000000010, 10];
    }

    let f = {
        type: "polygon",
        rings: [r1, r2, r3, r4]
    }

    ba3floor.push(f)
}

const ba3wall = []

for(let i = 0; i <= 15; i ++) {
    let w1, w2, w3, w4;

    if(i < 15) {
        w1 = [ba3base.rings[i][0], ba3base.rings[i][1], 10];
        w2 = [ba3base.rings[i + 1][0], ba3base.rings[i + 1][1], 10];
        w3 = [ba3base.rings[i + 1][0], ba3base.rings[i + 1][1] + 0.000000000000010, 35];
        w4 = [ba3base.rings[i][0], ba3base.rings[i][1] + 0.000000000000010, 35];
    } else {
        w1 = [ba3base.rings[15][0], ba3base.rings[15][1], 10];
        w2 = [ba3base.rings[0][0], ba3base.rings[0][1], 10];
        w3 = [ba3base.rings[0][0], ba3base.rings[0][1] + 0.000000000000010, 35];
        w4 = [ba3base.rings[15][0], ba3base.rings[15][1] + 0.000000000000010, 35];
    }

    let w = {
        type: "polygon",
        rings: [w1, w2, w3, w4]
    }

    ba3wall.push(w)
}

const ba3line = [];

for(let i = 0; i <= 4; i++) {
    let l = [];

    if(i == 0) {
        for(let j = 0; j <= 16; j++) {
            if(j < 16) {
                l.push([ba3base.rings[j][0], ba3base.rings[j][1], 12.5])
            } else {
                l.push([ba3base.rings[0][0], ba3base.rings[0][1], 12.5])
            }
        }
    } else {
        for(let j = 0; j <= 16; j++) {
            if(j < 16) {
                l.push([ba3base.rings[j][0], ba3base.rings[j][1], 12.5 + i * 5])
            } else {
                l.push([ba3base.rings[0][0], ba3base.rings[0][1], 12.5 + i * 5])
            }
        }
    }

    let line = {
        type: "polyline", // autocasts as new Polyline()
        paths: l
    };

    ba3line.push(line);
}

export { ba3base, ba3roof, ba3floor, ba3wall, ba3line }